schema {
    query: Query
    mutation: Mutation
}

type Query {
    planets: [Planet!]!
    planet(id: ID!): Planet!
}

type Mutation {
    createPlanet(name: String!, type: Type!, characteristics: CharacteristicsInput!): Planet!
}

interface Planet {
    id: ID!
    name: String!
    type: Type!
    # base characteristics
    characteristics: Characteristics!
    isRotatingAroundSun: Boolean! @deprecated(reason: "Do not use this field")
    # todo satellites
}

type UninhabitedPlanet implements Planet {
    id: ID!
    name: String!
    type: Type!
    characteristics: Characteristics!
    isRotatingAroundSun: Boolean!
}

type InhabitedPlanet implements Planet {
    id: ID!
    name: String!
    type: Type!
    characteristics: Characteristics!
    isRotatingAroundSun: Boolean!
    # in billions
    population: Float!
}

enum Type {
    TERRESTRIAL_PLANET
    GAS_GIANT
    ICE_GIANT
    DWARF_PLANET
}

type Characteristics {
    meanRadius: Float!
    earthsMass: Float!
}

input CharacteristicsInput {
    meanRadius: Float!
    earthsMass: Float!
}
