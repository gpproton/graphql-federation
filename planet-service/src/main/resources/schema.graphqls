type Query {
    getPlanets: [Planet!]!
    getPlanet(id: ID!): Planet!
    getPlanetByName(name: String!): Planet!
}

type Mutation {
    createPlanet(name: String!, type: Type!, characteristics: CharacteristicsInput!): Planet!
}

type Planet @key(fields: "id") {
    id: ID!
    name: String!
    # from an astronomical point of view
    type: Type!
    isRotatingAroundSun: Boolean! @deprecated(reason: "Now it is not in doubt. Do not use this field")
    characteristics: Characteristics!
}

interface Characteristics {
    meanRadius: Float!
    earthsMass: Float!
}

type InhabitedPlanetCharacteristics implements Characteristics {
    meanRadius: Float!
    earthsMass: Float!
    # in billions
    population: Float!
}

type UninhabitedPlanetCharacteristics implements Characteristics {
    meanRadius: Float!
    earthsMass: Float!
}

enum Type {
    TERRESTRIAL_PLANET
    GAS_GIANT
    ICE_GIANT
    DWARF_PLANET
}

input CharacteristicsInput {
    meanRadius: Float!
    earthsMass: Float!
    population: Float
}
